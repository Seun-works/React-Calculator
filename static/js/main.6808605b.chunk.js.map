{"version":3,"sources":["DigitButton.jsx","OperationButton.jsx","App.jsx","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","length","slice","previousOperand","evaluate","prev","parseFloat","current","isNaN","computation","toString","FORMAT_INTEGER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6808605b.chunk.js","sourcesContent":["import { ACTIONS } from './App';\nimport React from 'react'\n\nconst DigitButton = ({dispatch, digit}) => {\n    return (\n        <button onClick = {() => dispatch({type: ACTIONS.ADD_DIGIT, payload: {digit}})}>{digit}</button>\n    )\n}\n\nexport default DigitButton;\n","import { ACTIONS } from './App';\nimport React from 'react'\n\nconst OperationButton = ({dispatch, operation}) => {\n    return (\n        <button onClick = {() => dispatch({type: ACTIONS.CHOOSE_OPERATION, payload: {operation}})}>{operation}</button>\n    )\n}\n\nexport default OperationButton;\n","/* eslint-disable default-case */\nimport './Styles.css';\n\nimport DigitButton from './DigitButton';\nimport OperationButton from './OperationButton';\nimport {useReducer} from 'react';\n\n//THis variable represents all the actions that we want to be able to perform in the calculator\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\n//This is a reducer which gives each button in the calculator its functionality\nconst reducer = (state, {type, payload}) => {\n  switch(type) {\n    //This gives the calculator the digit adding functionality\n    case ACTIONS.ADD_DIGIT:\n      if(state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false\n        }\n      }\n      \n      if(payload.digit === '0' && state.currentOperand === '0') {\n        return state}\n      if(payload.digit === '.' && state.currentOperand.includes(\".\")) {\n        return state }\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      }\n      \n    //This allows the calculator to clear all the output   \n    case ACTIONS.CLEAR: \n     return {\n       \n     }  \n    \n\n    //This allows the calculator to remove either one digit or a whole compouted value \n    case ACTIONS.DELETE_DIGIT:\n      if(state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        }\n      }\n      if(state.currentOperand == null) {\n        return state\n      }\n      if(state.currentOperand.length === 1 ) {\n        return {\n          ...state,\n          currentOperand: null\n        }\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n\n      }\n\n    //This allows the calculator to choose any operation of our choice  \n     case ACTIONS.CHOOSE_OPERATION:\n       if(state.currentOperand == null && state.previousOperand == null) {\n         return state\n       }\n\n       if(state.currentOperand == null) {\n         return {\n           ...state,\n           operation: payload.operation\n         }\n       }\n\n       if(state.previousOperand == null) {\n         return{\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null\n         }\n       }\n       return {\n         ...state,\n         previousOperand: evaluate(state),\n         currentOperand: null,\n         operation: payload.operation\n       }\n\n\n      //This gives the calculator its true functioanlity, which is to calculate whatever we want to do \n      case ACTIONS.EVALUATE: \n       if(state.operation == null || state.currentOperand == null || state.previousOperand == null) {\n         return state\n       }\n       return {\n         ...state,\n         overwrite: true,\n         previousOperand: null,\n         currentOperand: evaluate(state),\n         operation: null\n       }\n  }\n}\n\nconst evaluate = ({previousOperand, currentOperand, operation}) => {\n  let prev = parseFloat(previousOperand);\n  let current = parseFloat(currentOperand);\n  if(isNaN(prev) || isNaN(current)) {\n    return '';\n  }\n  let computation = ''\n  switch (operation) {\n    case '+':\n      computation = prev + current;\n      break\n    \n    case 'รท':\n      computation = prev / current;\n      break\n    \n    case '-':\n      computation = prev - current;\n      break\n      \n    case '*':\n      computation = prev * current;\n      break  \n      \n  }\n  return computation.toString();\n}\n\n\nconst FORMAT_INTEGER = new Intl.NumberFormat('en-us', {\n  maximumFractionDigits: 0\n})\n\nconst formatOperand = (operand) => {\n  if(operand == null) return\n  const [integer, decimal] = operand.split('.');\n  if(decimal == null) return FORMAT_INTEGER.format(integer);\n  return `${FORMAT_INTEGER.format(integer)}.${decimal}`\n}\n\n\nfunction App() {\n  const [{currentOperand, previousOperand, operation}, dispatch] = useReducer(reducer, {});\n\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button className = \"span-two\" onClick={() => dispatch({type: ACTIONS.CLEAR})}>AC</button>\n      <button className = \"\" onClick={() => dispatch({type: ACTIONS.DELETE_DIGIT})}>DEL</button>\n      <OperationButton operation = \"รท\" dispatch={dispatch} />\n      <DigitButton digit = \"1\" dispatch={dispatch} />\n      <DigitButton digit = \"2\" dispatch={dispatch} />\n      <DigitButton digit = \"3\" dispatch={dispatch} />\n      <OperationButton operation = \"*\" dispatch={dispatch} />\n      <DigitButton digit = \"4\" dispatch={dispatch} />\n      <DigitButton digit = \"5\" dispatch={dispatch} />\n      <DigitButton digit = \"6\" dispatch={dispatch} />\n      <OperationButton operation = \"+\" dispatch={dispatch} />\n      <DigitButton digit = \"7\" dispatch={dispatch} />\n      <DigitButton digit = \"8\" dispatch={dispatch} />\n      <DigitButton digit = \"9\" dispatch={dispatch} />\n      <OperationButton operation = \"-\" dispatch={dispatch} />\n      <DigitButton digit = \".\" dispatch={dispatch} />\n      <DigitButton digit = \"0\" dispatch={dispatch} />  \n      <button className = \"span-two\" onClick={() => dispatch({type: ACTIONS.EVALUATE})}>=</button>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import App from './App.jsx';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}